oracle("mode") = WGAN_GP

source:
    bind = "/DM-Dash/NeoPulse_Examples/GANs/wganGP/MNIST/training_data.csv";
    input:
        x ~ from "image"
            -> image: [shape = [28, 28], channels = 1]
            -> ImageDataGenerator: [],
        z ~ from "noise"
            -> flat: [100]
            -> FlatDataGenerator: [];
    params:
        batch_size = 128,
        shuffle = True,
        shuffle_init = True;

architecture name:generator :
    input:
        z ~ flat: [100];
    output:
        g ~ image: [shape = [28,28], channels = 1];


      z -> Dense: [1024, activation='relu']
        -> LeakyReLU: []
        -> Dense: [6272]
        -> BatchNormalization: []
        -> LeakyReLU: []
        -> Reshape: [[7, 7, 128]]
        -> Conv2DTranspose: [128, [5,5], strides= 2, padding = 'same']
        -> BatchNormalization: []
        -> LeakyReLU: []
        -> Conv2DTranspose: [64, [5,5], padding = 'same']
        -> BatchNormalization: []
        -> LeakyReLU: []
        -> Conv2D: [64, [5,5], padding = "same"]
        -> BatchNormalization: []
        -> LeakyReLU: []
        -> Conv2DTranspose: [64, [5,5], strides = 2, padding = 'same']
        -> BatchNormalization: []
        -> LeakyReLU: []
        -> Conv2D: [1, [5,5], padding = 'same']
        -> Activation: ['tanh']
        -> g;


architecture name:discriminator:
    input:
        img ~ image: [shape = [28, 28], channels = 1];
    output:
        d ~ flat: [1];

    img -> Conv2D: [64, [5,5], padding = "same"]
        -> LeakyReLU: []
        -> Conv2D: [128, [5,5], kernel_initializer = 'he_normal', strides = 2]
        -> LeakyReLU: []
        -> Conv2D: [128, [5,5], kernel_initializer = 'he_normal', strides = 2]
        -> LeakyReLU: []
        -> Flatten:[]
        -> Dense: [1024, kernel_initializer = 'he_normal']
        -> LeakyReLU: []
        -> Dense: [1, kernel_initializer = 'he_normal']
        -> d;


train: 
    compile: optimizer = Adam: [0.0001, beta_1 = 0.5, beta_2 = 0.9];
    run:
        nb_epoch = 2;