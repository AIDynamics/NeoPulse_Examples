oracle("mode") = "CGAN"

source:
    bind = "/DM-Dash/NeoPulse_Examples/GANs/cgan/MNIST/training_data.csv";
    input:
        x ~ from "image"
            -> image: [shape = [28, 28], channels = 1]
            -> ImageDataGenerator: [],
        z ~ from "noise"
            -> flat: [64]
            -> FlatDataGenerator: [],
        label ~ from "label"
            -> flat: [10]
            -> FlatDataGenerator: [];
    params:
        batch_size = 128,
        shuffle = True,
        shuffle_init = True;


architecture name:generator :
    input:
        z ~ flat: [64],
        label ~ flat: [10];
    output:
        g ~ image:[shape = [28,28], channels = 1];

    label -> Dense:[64]
          -> imd

    [z, imd] -> Multiply:[]
               -> Dense: [256]
               -> LeakyReLU: [alpha = 0.2]
               -> BatchNormalization: [momentum = 0.8]
               -> Dense: [512]
               -> LeakyReLU: [alpha = 0.2]
               -> BatchNormalization: [momentum = 0.8]
               -> Dense: [1024]
               -> LeakyReLU: [alpha = 0.2]
               -> BatchNormalization: [momentum = 0.8]
               -> Dense: [784, activation = 'tanh']
               -> Reshape: [[28,28,1]]
               -> g;

architecture name:discriminator:
    input:
        img ~ image: [shape = [28, 28], channels = 1],
        label ~ flat: [10];
    output:
        d;

    img -> Flatten: []
        -> img_f

    label -> Dense:[784]
          -> label_f

    [img_f, label_f] -> Multiply:[]
                   -> Dense: [512]
                   -> LeakyReLU: [alpha = 0.2]
                   -> Dense: [512]
                   -> LeakyReLU: [alpha = 0.2]
                   -> Dropout: [0.4]
                   -> Dense: [512]
                   -> LeakyReLU: [alpha = 0.2]
                   -> Dropout: [0.4]
                   -> Dense: [1, activation = 'sigmoid']
                   -> d;

train :
    compile:
        optimizer = Adam: [lr = 0.0002, beta_1 = 0.5],
        loss = 'binary_crossentropy';
    run:
        epochs = 2;