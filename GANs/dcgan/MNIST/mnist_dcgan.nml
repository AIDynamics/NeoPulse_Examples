oracle("mode") = "DCGAN"

source:
    bind = "/DM-Dash/NeoPulse_Examples/GANs/dcgan/MNIST/training_data.csv";
    input:
        x ~ from "image"
            -> image: [shape = [28, 28], channels = 1]
            -> ImageDataGenerator: [],
        z ~ from "noise"
            -> flat: [100]
            -> FlatDataGenerator: [];
    params:
        batch_size = 128,
        shuffle = True,
        shuffle_init = True;




architecture name:generator:
    input:
        z ~ flat: [100];
    output:
        g ~ image: [shape = [28, 28], channels = 1];

    z -> Dense: [6272]
      -> Activation: ['relu']
      -> Reshape: [[7,7,128]]
      -> BatchNormalization: [momentum = 0.8]
      -> UpSampling2D: [[2,2]]
      -> Conv2D:[128, kernel_size = 3, padding = 'same']
      -> Activation: ['relu']
      -> BatchNormalization: [momentum = 0.8]
      -> UpSampling2D:[[2,2]]
      -> Conv2D: [64, kernel_size = 3, padding = 'same']
      -> Activation: ['relu']
      -> BatchNormalization: [momentum = 0.8]
      -> Conv2D: [1, kernel_size = 3, padding = 'same']
      -> Activation: ['tanh']
      -> g;

architecture name: discriminator:
    input:
        img ~ image: [shape = [28, 28], channels = 1];
    output:
        d ~ flat: [1];

    img -> Conv2D:[32, kernel_size = 3, strides = 2, input_shape = [28, 28, 1], padding = 'same']
        -> LeakyReLU:[alpha = 0.2]
        -> Dropout:[0.25]
        -> Conv2D: [64, kernel_size = 3, strides = 2, padding = 'same']
        -> ZeroPadding2D: []
        -> LeakyReLU:[alpha = 0.2]
        -> Dropout: [0.25]
        -> BatchNormalization: [momentum = 0.8]
        -> Conv2D: [128, kernel_size = 3, strides = 2, padding = 'same']
        -> LeakyReLU: [alpha = 0.2]
        -> Dropout: [0.25]
        -> BatchNormalization : [momentum = 0.8]
        -> Conv2D: [256, kernel_size= 3, strides = 1, padding = 'same']
        -> LeakyReLU: [alpha = 0.2]
        -> Dropout: [0.25]
        -> Flatten:[]
        -> Dense:[1, activation = 'sigmoid']
        -> d;


train:
    compile:
        optimizer = Adam: [0.0002, 0.5],
        loss = 'binary_crossentropy';
    run:
        nb_epoch = 2;
        
